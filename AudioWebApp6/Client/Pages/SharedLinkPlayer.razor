@page "/sharedplayer/{Title}/{ServerFlag}/{Source}/{StaticHeaderTitle}"
@page "/sharedplayer"
@using System.Web
@using System.Globalization
@using AudioWebApp.Client.Services
@inject LinkShareService LinkShare
@inject SharedDataService sharedDataService
<PageTitle>Shared</PageTitle>
<div>
    <MudCardContent>
        
        @if (dataReady == null)
        {
            <MudPaper Class="d-flex justify-center align-center" Elevation="0" Height="100vh">
                <MudProgressCircular Style="color:#5F76A6; " Indeterminate="true" />
            </MudPaper>
        }
        else
        {
            <MudPaper Elevation="0">
                <h3>@title</h3>
                <p>@category</p>
                <p>@source</p>
                
                <MudIconButton Style="font-size: 25px;" Icon="@Icons.Material.Outlined.PlayCircle" Color="Color.Primary" aria-label="Play" OnClick="OpenAudio"></MudIconButton>
            </MudPaper>  
        }
        </MudCardContent>
</div>

@code {
    string? dataReady;
    [Parameter] public string StaticHeaderTitle { get; set; }
    [Parameter] public string ServerFlag{ get; set; }
    private string source;
    private string title;
    public string category;
    [Parameter] public string Title
    {
        get => title;
        set
        {
            title = HttpUtility.UrlDecode(value);
        }
    }
    [Parameter] public string Source
    {
        get => source;
        set
        {
            if(ServerFlag == "one"){
                source = $"{audioBookServer}{HttpUtility.UrlDecode(value)}.mp3";
            }
            else{
                source = $"{server}{HttpUtility.UrlDecode(value)}.mp3";
            }

        }
    }
    string server = "https://thenarrowpath.com";
    string audioBookServer = "https://theos.s3.us-west-1.amazonaws.com";

    protected override async Task OnInitializedAsync()
    {
        if(string.IsNullOrWhiteSpace(source))
        {
            dataReady = "dataLoaded";
        }
        else
        {
            dataReady = "dataLoaded";
            category = GenerateCategoryFromSource(source);
        }

    }
    public void OpenAudio()
    {
        sharedDataService.AudioTitle = title;
        sharedDataService.AudioLink = source;
        sharedDataService.TogglePlayer();
    }
    public string GenerateCategoryFromSource(string value)
    {

        string cleanedValue = RemoveMemeType(value);

        string[] segments = cleanedValue.Split('/');
        string rawCategory = segments[4].Replace("-", " ");
        string finishedCategory = rawCategory.Replace("_", " ");

        TextInfo textInfo = new CultureInfo("en-US", false).TextInfo;
        string category = textInfo.ToTitleCase(finishedCategory);

        return category;
    }
    public string RemoveMemeType(string value)
    {
        if (value.EndsWith(".mp3"))
        {
            return value.Substring(0, value.Length - 4);
        }
        else
        {
            return value;
        }
    }
}
