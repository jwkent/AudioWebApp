@using AudioWebApp.Client.Services
@using System.Text.RegularExpressions
@inherits LayoutComponentBase
@inject SharedDataService SharedDataService
@inject FavoritesService FavoriteService
@inject LinkShareService LinkShare
@inject ISnackbar Snackbar
@inject IDialogService DialogService
<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <div>
    <MudAppBar Elevation="0">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" 
        Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
            <MastHead />
    </MudAppBar>
    
    <MudDrawer @bind-Open="_drawerOpen" Elevation="1" ClipMode="DrawerClipMode.Always">
        
        <NavMenu />
        
    </MudDrawer>
    
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="ma-0 pa-0">
                    @Body
                @if (playerOpen == true)
                {
                    <div class="stickyplayer">
                        <div class="d-flex flex-grow-1 gap-0" style="padding-top:3px;">
                            <MudPaper Class="flex-none d-flex py-0 align-bottom" Style="justify-content:flex-start;" Width="50px" Elevation="0">
                                <MudButton Style=" padding:0px; color:#9396A1" OnClick="ClosePlayer" >
                                    <MudIcon Icon="@Icons.Material.Filled.Close" Title="Close player"></MudIcon>
                                </MudButton>
                            </MudPaper>
                            <MudPaper Class="flex-none d-flex py-0 align-bottom" Style="justify-content:flex-end;" Width="60px" Elevation="0">
                                <MudButton Style=" padding:0px;  color:#9396A1" OnClick="AddToFavorites">
                                    <MudIcon  Icon="@favAddIcon" Title="Add Favorite"/>
                                </MudButton>
                            </MudPaper>
                            <MudPaper Class="flex-none d-flex py-0 align-bottom" Style="justify-content:flex-end;" Width="45px" Elevation="0">
                                <MudButton Style=" padding:0px;  color:#9396A1" OnClick="AudioReverse">
                                    <MudIcon Icon="@Icons.Material.Filled.Replay10" Title="Reverse" />
                                </MudButton>
                            </MudPaper>
                            <MudPaper Class="flex-none d-flex py-0 align-bottom" Style="justify-content:flex-end;" Width="45px" Elevation="0">
                                <MudButton Style=" padding:0px;  color:#9396A1" OnClick="AudioForward">
                                    <MudIcon Icon="@Icons.Material.Filled.Forward10" Title="Forward" />
                                </MudButton>
                            </MudPaper>
                            <MudPaper Class="flex-none d-flex py-0 align-bottom" Style="justify-content:flex-end;" Width="45px" Elevation="0">
                                <MudButton Style="padding:0px; color:#9396A1" OnClick="PlayNextQueue">
                                    <MudIcon Icon="@Icons.Material.Filled.SkipNext" Title="Next"/>
                                </MudButton>
                            </MudPaper>
                            <MudPaper Class="flex-none d-flex py-0 align-bottom" Style="justify-content:flex-end;" Width="45px" Elevation="0">
                                <MudButton Style=" padding:0px;  color:#9396A1" OnClick="@OpenPlaybackSpeedControls">
                                    <MudIcon Icon="@Icons.Material.Filled.Speed" Title="Playback Speed" />
                                </MudButton>
                                <MudPopover Open="@_speedControls" Fixed="true" Square="false" Class="px-4 pt-4" style="background-color:#d5dcec;" AnchorOrigin="Origin.TopCenter" TransformOrigin="Origin.BottomCenter">
                                    <div class="d-flex flex-column">
                                        @foreach (var s in speeds)
                                        {
                                            <MudButton style="color:#2f40aa;" OnClick="(e) =>SetPlaybackSpeed(s)">@String.Format("{0:.00}",@s)</MudButton>
                                        }
                                        <MudButton OnClick="@OpenPlaybackSpeedControls" Class="ml-auto mb-1" style="color:#6e83ae;">Close</MudButton>
                                    </div>
                                </MudPopover>
                            </MudPaper>
                            <MudPaper Class="flex-none d-flex py-0 align-bottom" Style="justify-content:flex-end;" Width="45px" Elevation="0">
                                <MudButton Style="padding:0px; color:#9396A1" OnClick="@ShareAudioSMS">
                                    <MudIcon Icon="@Icons.Material.Outlined.Textsms" Title="Share via SMS"/>
                                </MudButton>
                            </MudPaper>

                        </div>
                        <div class="d-flex flex-grow-1 gap-0">
                            <MudPaper Class="flex-auto d-flex py-0 justify-center align-center"  Width="100%" Elevation="0">
                                <MudText class="audioTitleText">@audioTitle</MudText>
                            </MudPaper>
                        </div>  
                        <div class="d-flex flex-grow-1 gap-0">
                            <MudPaper Class="flex-auto d-flex py-1 justify-center align-center"  Width="100%" Elevation="0">
                                <audio id="audioPlayer"src="@audioSource" controls autoplay title="@audioTitle" artist="@artist" category="@category" series="@audioSeries"></audio>
                            </MudPaper>
                        </div>
                    </div>
                }
        </MudContainer>
    </MudMainContent>
    </div>
</MudLayout>

@code {
    [Inject]
    public IJSRuntime JSRuntime { get; set; }

    string? audioTitle;
    string? audioSource;
    string? audioSeries;
    bool playerOpen = false;
    bool _drawerOpen = true;
    string artist = "The Narrow Path: Steve Gregg";
    string category = "";
    List<double> speeds = new List<double> {0.7, 0.8, 0.9, 1, 1.25, 1.50, 1.75, 2.0 };
    private bool _speedControls;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
    void ClosePlayer()
    {
        playerOpen = false;
    }
    public void HandleShowMenu()
    {
        Console.WriteLine($"in main {_drawerOpen}");
        //DrawerToggle();
        if(_drawerOpen == false){
            DrawerToggle();
            StateHasChanged();
        }

    }

    protected override void OnInitialized()
    {
        SharedDataService.OnPlayerToggle += HandlePlayerToggle;
        SharedDataService.OnShowContent += HandleShowMenu;
    }
    private async void HandlePlayerToggle()
    {
        playerOpen = true;
        audioTitle = SharedDataService.AudioTitle;
        audioSource = SharedDataService.AudioLink;
        audioSeries = SharedDataService.AudioSeries;
        await JSRuntime.InvokeVoidAsync("getStartTime", audioSource);
        await JSRuntime.InvokeVoidAsync("getPlaybackSpeed");
        await JSRuntime.InvokeVoidAsync("listenForEndOfMessage");
        category = GetCategory(audioSource);
        StateHasChanged();
    }
    private string GetCategory(string text)
    {
        Regex regex = new Regex(@"/([^/]+)/[^/]+$");
        Match match = regex.Match(text);
        if (match.Success)
        {
            return char.ToUpper(match.Groups[1].Value[0]) + match.Groups[1].Value.Substring(1);
        }
        else
        {
            return "NA";
        }
    }
    public async Task AddToFavorites()
    {
        await FavoriteService.AddToFavorites(audioTitle, audioSource);
        // use the Mudsnack bar to alert it's been added.
        Snackbar.Add("Added to favorites.", Severity.Success);
        Snackbar.Configuration.ShowCloseIcon = false;
        Snackbar.Configuration.VisibleStateDuration = 1000;

    }

    private async Task AudioForward()
    {
        await JSRuntime.InvokeVoidAsync("audioForward");
    }
    private async Task AudioReverse()
    {
        await JSRuntime.InvokeVoidAsync("audioReverse");
    }
    private async Task SetPlaybackSpeed(double speed)
    {
        OpenPlaybackSpeedControls();
        await JSRuntime.InvokeVoidAsync("audioPlaybackRate",speed);
    }
    private void OpenPlaybackSpeedControls()
    {
        if (_speedControls)
            _speedControls = false;
        else
            _speedControls = true;
    }

    private async void ShareAudioLink()
    {
        await LinkShare.CopyAudioLinkToClipboard(audioSource, audioTitle);
    }
    private async void ShareAudioSMS()
    {
        await LinkShare.SendAudioLinkSMS(audioSource, audioTitle);
    }
    private async void PlayNextQueue()
    {
        if(SharedDataService.QueuedMessages.Count != 0)
        {
            var nextMessage = SharedDataService.QueuedMessages[0];
            SharedDataService.AudioTitle = nextMessage.Name;
            SharedDataService.AudioLink = Path.Combine(SharedDataService.QueuedMessagesServerPath, nextMessage.Link);

            HandlePlayerToggle();
            SharedDataService.QueuedMessages.RemoveAt(0);
        }
        else
        {
            return;
        }

    }

    public string favAddIcon = "<svg id=\"Layer_6\" data-name=\"Layer 6\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 22.5 19.41\">" +
    "<path d = \"M1,6.63C1,3.09,3.67,1.07,5.67,1c3.33,0,5.83,1.69,5.83,4.13,0-2.44,2.5-4,5-4,2,0,5,1.5,5,5,0,4.5-10,12.05-10,12.05,0,0-10.5-7.09-10.5-11.55Z\" style=\"fill: none; stroke: #5f76a6; stroke-miterlimit: 10; stroke-width: 2px;\"/>" +
      "<circle cx = \"15.66\" cy=\"12.56\" r=\"5.5\" style=\"stroke-width: 0px;\"/>" +
      "<line x1 = \"12.16\" y1=\"12.56\" x2=\"19.16\" y2=\"12.56\" style=\"fill: none; stroke: #fff; stroke-miterlimit: 10; stroke-width: 2px;\"/>" +
      "<line x1 = \"15.66\" y1=\"16.06\" x2=\"15.66\" y2=\"9.06\" style=\"fill: none; stroke: #fff; stroke-miterlimit: 10; stroke-width: 2px;\"/>" +
    "</svg>";
}